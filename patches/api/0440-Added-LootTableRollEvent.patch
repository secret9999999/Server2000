From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: aerulion <aerulion@gmail.com>
Date: Tue, 29 Aug 2023 04:51:53 +0200
Subject: [PATCH] Added LootTableRollEvent


diff --git a/src/main/java/io/papermc/paper/event/server/LootTableRollEvent.java b/src/main/java/io/papermc/paper/event/server/LootTableRollEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf87658239ea84a74df875ccda1b52a0dcaa9231
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/server/LootTableRollEvent.java
@@ -0,0 +1,97 @@
+package io.papermc.paper.event.server;
+
+import java.util.Collection;
+import java.util.List;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.server.ServerEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.loot.LootContext;
+import org.bukkit.loot.LootTable;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when a {@link LootTable} is rolled to generate loot for a specific context.
+ */
+public class LootTableRollEvent extends ServerEvent {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final @NotNull LootTable lootTable;
+    private final @NotNull LootContext lootContext;
+    private final @NotNull List<ItemStack> loot;
+
+    /**
+     * Represents an event that is fired when a loot table roll occurs.
+     *
+     * @param lootTable   The loot table that was rolled.
+     * @param lootContext The context of the loot roll.
+     * @param loot        The list of loot items obtained from the roll.
+     */
+    @ApiStatus.Internal
+    public LootTableRollEvent(final @NotNull LootTable lootTable,
+        final @NotNull LootContext lootContext, final @NotNull List<ItemStack> loot) {
+        super();
+        this.lootTable = lootTable;
+        this.lootContext = lootContext;
+        this.loot = loot;
+    }
+
+    /**
+     * Gets the loot table that was rolled.
+     *
+     * @return The loot table that was rolled.
+     */
+    public @NotNull LootTable getLootTable() {
+        return this.lootTable;
+    }
+
+    /**
+     * Gets the loot context for the current loot table roll.
+     *
+     * @return The loot context for the current loot table roll.
+     */
+    public @NotNull LootContext getLootContext() {
+        return this.lootContext;
+    }
+
+    /**
+     * Get a mutable list of all {@link ItemStack}s generated in this loot table roll.
+     * <p>
+     * Any items added or removed from the returned list will be reflected in the loot generation.
+     *
+     * @return The list of generated items.
+     */
+    public @NotNull List<ItemStack> getLoot() {
+        return this.loot;
+    }
+
+    /**
+     * Set the loot for this loot table roll.
+     * <p>
+     * Any existing loot will be cleared, and the new loot will be added to the loot roll.
+     * <p>
+     * Can be set to null to clear.
+     *
+     * @param loot The collection of ItemStacks to set as the loot.
+     */
+    public void setLoot(final @Nullable Collection<ItemStack> loot) {
+        this.loot.clear();
+        if (loot != null) {
+            this.loot.addAll(loot);
+        }
+    }
+
+    @Override
+    public @NotNull HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @Contract(pure = true)
+    public static @NotNull HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+}
