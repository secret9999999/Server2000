From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cryptite <cryptite@gmail.com>
Date: Mon, 1 May 2023 15:23:34 -0500
Subject: [PATCH] Add PlayerPreRespawnLocationEvent


diff --git a/src/main/java/io/papermc/paper/event/player/PlayerPreRespawnLocationEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerPreRespawnLocationEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..bae7b9d61a061f9a4cc812c1b9107b2695dd5374
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/player/PlayerPreRespawnLocationEvent.java
@@ -0,0 +1,65 @@
+package io.papermc.paper.event.player;
+
+import org.bukkit.Location;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Called when a respawn event tries to determine the location of a respawn. This is called before {@link PlayerRespawnEvent}
+ */
+public class PlayerPreRespawnLocationEvent extends PlayerEvent {
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+    private final PlayerRespawnEvent.RespawnReason respawnReason;
+    private Location respawnLocation;
+
+    public PlayerPreRespawnLocationEvent(@NotNull final Player respawnPlayer, PlayerRespawnEvent.RespawnReason respawnReason) {
+        super(respawnPlayer);
+        this.respawnReason = respawnReason;
+    }
+
+    /**
+     * Gets the current respawn location
+     *
+     * @return Location current respawn location
+     */
+    @Nullable
+    public Location getRespawnLocation() {
+        return this.respawnLocation != null ? this.respawnLocation.clone() : null;
+    }
+
+    /**
+     * Sets the new respawn location.
+     *
+     * @param respawnLocation The exact location for the respawn. Can be set to null to invalidate any previously called/modified events<br/>
+     * <b>Note:</b> If this is provided, <b>no vanilla logic that calculates "safe" respawn locations will be done.</b> It is up to you to ensure you are
+     * providing a good respawn location for a Player.
+     */
+    public void setRespawnLocation(@Nullable Location respawnLocation) {
+        this.respawnLocation = respawnLocation;
+    }
+
+    /**
+     * Gets the reason this respawn event was called.
+     *
+     * @return the reason the event was called.
+     */
+    @NotNull
+    public PlayerRespawnEvent.RespawnReason getRespawnReason() {
+        return respawnReason;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
