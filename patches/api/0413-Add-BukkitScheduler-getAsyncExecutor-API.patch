From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: A248 <theanandbeh@gmail.com>
Date: Sat, 26 Nov 2022 17:00:11 -0500
Subject: [PATCH] Add BukkitScheduler getAsyncExecutor API


diff --git a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
index d2ab2ee1e1e8fbaac4edef5b3ee313ee4ceb6991..46b6e7471418d0f5b5e43736cfd4756c55d44a95 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
@@ -458,7 +458,7 @@ public interface BukkitScheduler {
     @NotNull
     public BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
 
-    // Paper start - add getMainThreadExecutor
+    // Paper start
     /**
      * Returns an executor that will run tasks on the next server tick.
      *
@@ -467,5 +467,20 @@ public interface BukkitScheduler {
      */
     @NotNull
     public java.util.concurrent.Executor getMainThreadExecutor(@NotNull Plugin plugin);
+
+    /**
+     * Creates an asynchronous {@link Executor} for a plugin. Runnables submitted through the returned Executor
+     * will be executed on behalf of the plugin specified. <br>
+     * <br>
+     * Unlike using the otherwise equivalent {@link #runTaskAsynchronously(Plugin, Runnable)}, the {@code Executor}
+     * returned will not be coupled to the main thread. If the main thread is blocked, work submitted through
+     * it will execute regardless. Execution through it commences with no regard to the server tick loop.
+     * 
+     * @param plugin the reference to the plugin scheduling the task
+     * @return a {@code Executor} which executes runnables on behalf of the plugin
+     * @throws IllegalArgumentException if plugin is null
+     */
+    @NotNull
+    public java.util.concurrent.Executor getAsyncExecutor(@NotNull Plugin plugin);
     // Paper end
 }
