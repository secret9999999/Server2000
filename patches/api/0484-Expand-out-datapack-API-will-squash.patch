From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Wed, 29 May 2024 17:55:41 -0700
Subject: [PATCH] Expand out datapack API (will squash)


diff --git a/src/main/java/io/papermc/paper/datapack/Datapack.java b/src/main/java/io/papermc/paper/datapack/Datapack.java
index 7b2ab0be10a21e0496ad1d485ff8cb2c0b92a2cb..42718c3c87f1161d71dbe072e3f9596952728c85 100644
--- a/src/main/java/io/papermc/paper/datapack/Datapack.java
+++ b/src/main/java/io/papermc/paper/datapack/Datapack.java
@@ -1,26 +1,65 @@
 package io.papermc.paper.datapack;
 
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.ComponentLike;
 import org.checkerframework.checker.nullness.qual.NonNull;
 
-public interface Datapack {
+/**
+ * It is not supported to hold references to instances of this class, just
+ * query them from {@link DatapackManager} when needed. There are no guarantees
+ * an instance will remain valid.
+ */
+public interface Datapack extends ComponentLike {
 
     /**
+     * Gets the name/id of this datapack.
+     *
      * @return the name of the pack
      */
-    @NonNull
-    String getName();
+    @NonNull String getName();
 
     /**
+     * Gets the description of this datapack.
+     *
+     * @return the description
+     */
+    @NonNull Component description();
+
+    /**
+     * Gets if this datapack is required to be enabled.
+     *
+     * @return true if the pack is required
+     */
+    boolean isRequired();
+
+    /**
+     * Gets the compatibility status of this pack.
+     *
      * @return the compatibility of the pack
      */
-    @NonNull
-    Compatibility getCompatibility();
+    @NonNull Compatibility getCompatibility();
+
+    // /** // TODO when we redo FeatureFlag API
+    //  * Gets the set of required features for this datapack.
+    //  *
+    //  * @return the set of required features
+    //  */
+    // @NonNull @Unmodifiable Set<FeatureFlag> getRequiredFeatures();
 
     /**
-     * @return whether or not the pack is currently enabled
+     * Gets the enabled state of this pack.
+     *
+     * @return whether the pack is currently enabled
      */
     boolean isEnabled();
 
+    /**
+     * Changes the enabled state of this pack. Will
+     * cause a reload of resources ({@code /minecraft:reload}) if
+     * any change happens.
+     *
+     * @param enabled true to enable, false to disable
+     */
     void setEnabled(boolean enabled);
 
     enum Compatibility {
@@ -28,5 +67,4 @@ public interface Datapack {
         TOO_NEW,
         COMPATIBLE,
     }
-
 }
diff --git a/src/main/java/io/papermc/paper/datapack/DatapackManager.java b/src/main/java/io/papermc/paper/datapack/DatapackManager.java
index 58f78d5e91beacaf710f62461cf869f70d08b2a2..bbb81a8058a67fd554c781dbb4908434ad339655 100644
--- a/src/main/java/io/papermc/paper/datapack/DatapackManager.java
+++ b/src/main/java/io/papermc/paper/datapack/DatapackManager.java
@@ -3,19 +3,41 @@ package io.papermc.paper.datapack;
 import org.checkerframework.checker.nullness.qual.NonNull;
 
 import java.util.Collection;
+import org.checkerframework.checker.nullness.qual.Nullable;
+import org.jetbrains.annotations.Unmodifiable;
 
 public interface DatapackManager {
 
     /**
+     * Triggers a refresh of the available and selected datapacks. This
+     * can find new datapacks, remove old ones, and update the metadata for
+     * existing datapacks. Some of these changes will only take effect
+     * after the next {@link org.bukkit.Server#reloadData()} or {@code /minecraft:reload}.
+     */
+    void refreshPacks();
+
+    /**
+     * Gets a datapack by name. May require calling {@link #refreshPacks()} before
+     * to get the latest pack information.
+     *
+     * @param name the name/id of the datapack
+     * @return the datapack, or null if not found
+     */
+    @Nullable Datapack getPack(@NonNull String name);
+
+    /**
+     * Gets the available datapacks. May require calling {@link #refreshPacks()} before
+     * to get the latest pack information.
+     *
      * @return all the packs known to the server
      */
-    @NonNull
-    Collection<Datapack> getPacks();
+    @NonNull @Unmodifiable Collection<Datapack> getPacks();
 
     /**
+     * Gets the enabled datapacks. May require calling {@link #refreshPacks()} before
+     * to get the latest pack information.
+     *
      * @return all the packs which are currently enabled
      */
-    @NonNull
-    Collection<Datapack> getEnabledPacks();
-
+    @NonNull @Unmodifiable Collection<Datapack> getEnabledPacks();
 }
