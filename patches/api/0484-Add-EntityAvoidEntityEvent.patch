From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Joshua Prince <joshua@jtprince.com>
Date: Sun, 26 May 2024 19:23:43 -0700
Subject: [PATCH] Add EntityAvoidEntityEvent


diff --git a/src/main/java/io/papermc/paper/event/entity/EntityAvoidEntityEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityAvoidEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..1a720bf808c9486515ee3b427284cbf960428d87
--- /dev/null
+++ b/src/main/java/io/papermc/paper/event/entity/EntityAvoidEntityEvent.java
@@ -0,0 +1,69 @@
+package io.papermc.paper.event.entity;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when an entity avoids another nearby living entity.
+ * <p>
+ * Conditions vary for entities avoiding other entities. For example, creepers
+ * avoid cats and ocelots, ocelots avoid moving players, and evokers avoid
+ * players.
+ * <p>
+ * Generally, the avoiding entity will attempt to move away from its target.
+ * Some entities may react differently; for example, armadillos roll up to
+ * avoid their target instead of running away.
+ * <p>
+ * This event may be called several times per second by a single pair of
+ * entities. When the event is cancelled, the entity will behave as though its
+ * target is not there. However, an entity may still avoid a target if the
+ * target hurts the entity.
+ */
+public class EntityAvoidEntityEvent extends EntityEvent implements Cancellable {
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private final @NotNull LivingEntity target;
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public EntityAvoidEntityEvent(@NotNull Entity entity, @NotNull LivingEntity target) {
+        super(entity);
+        this.target = target;
+    }
+
+    /**
+     * Gets the entity which the affected entity is avoiding.
+     *
+     * @return the avoided entity
+     */
+    @NotNull
+    public Entity getTarget() {
+        return this.target;
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
