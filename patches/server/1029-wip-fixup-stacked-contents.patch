From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Mon, 24 Jun 2024 02:27:38 -0700
Subject: [PATCH] wip fixup stacked contents


diff --git a/src/main/java/io/papermc/paper/inventory/recipe/StackedContentsExtraMap.java b/src/main/java/io/papermc/paper/inventory/recipe/StackedContentsExtraMap.java
index 2258d4556a1c608e2b0ece38471350646718eb19..6d8be967a7104788bc3be0c996d2c9771b159210 100644
--- a/src/main/java/io/papermc/paper/inventory/recipe/StackedContentsExtraMap.java
+++ b/src/main/java/io/papermc/paper/inventory/recipe/StackedContentsExtraMap.java
@@ -14,13 +14,14 @@ import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.entity.player.StackedContents;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.ItemStackLinkedSet;
+import net.minecraft.world.item.crafting.CraftingInput;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.Recipe;
 
 public final class StackedContentsExtraMap {
 
     private final AtomicInteger idCounter = new AtomicInteger(BuiltInRegistries.ITEM.size()); // start at max vanilla stacked contents idx
-    private final Object2IntMap<ItemStack> exactChoiceIds = new Object2IntOpenCustomHashMap<>(ItemStackLinkedSet.TYPE_AND_TAG);
+    public final Object2IntMap<ItemStack> exactChoiceIds = new Object2IntOpenCustomHashMap<>(ItemStackLinkedSet.TYPE_AND_TAG);
     private final Int2ObjectMap<ItemStack> idToExactChoice = new Int2ObjectOpenHashMap<>();
     private final StackedContents contents;
     public final Map<Ingredient, IntList> extraStackingIds = new IdentityHashMap<>();
@@ -66,6 +67,14 @@ public final class StackedContentsExtraMap {
         return this.idToExactChoice.get(id);
     }
 
+    public void accountInput(final CraftingInput input) {
+        for (final ItemStack item : input.items()) {
+            if (!item.isEmpty()) {
+                this.accountStack(item, 1);
+            }
+        }
+    }
+
     public boolean accountStack(final ItemStack stack, final int count) {
         if (!this.exactChoiceIds.isEmpty()) {
             final int id = this.exactChoiceIds.getInt(stack);
diff --git a/src/main/java/net/minecraft/world/entity/player/StackedContents.java b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
index 0a58698dcd62adf3dc06a8c7dc782aada50409f5..ee033f5d3a5269852acf8450a62b16b4b3f78e67 100644
--- a/src/main/java/net/minecraft/world/entity/player/StackedContents.java
+++ b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
@@ -88,6 +88,12 @@ public class StackedContents {
 
     // Paper start - Improve exact choice recipe ingredients
     public void initialize(final Recipe<?> recipe) {
+        if (this.extrasMap != null) {
+            // clear previous extra ids
+            for (final int extraId : this.extrasMap.exactChoiceIds.values()) {
+                this.contents.remove(extraId);
+            }
+        }
         this.extrasMap = new io.papermc.paper.inventory.recipe.StackedContentsExtraMap(this, recipe);
     }
 
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
index 5740296b55827f11c0029e89a86eaab1a24f560c..a62d00419a1ec1ce38b27f8496cf4e743dffed7e 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -84,6 +84,7 @@ public class ShapelessRecipe extends io.papermc.paper.inventory.recipe.RecipeBoo
             return this.ingredients.getFirst().test(input.getItem(0));
         }
         input.stackedContents().initialize(this); // setup stacked contents for this recipe
+        input.stackedContents().extrasMap.accountInput(input);
         return input.stackedContents().canCraft(this, null);
         // Paper end - unwrap ternary & better exact choice recipes
     }
